#include <iostream>
#include <iomanip>
#include <vector>
#include <string>

using namespace std;

// Define a Product struct to store information about products
struct Product {
    int id;
    string name;
    double price;
};

// Define a ShoppingCart class to manage the items in the shopping cart
class ShoppingCart {
public:
    void addItem(Product product, int quantity);
    void removeItem(int productId);
    void checkout();
    void displayCart();
    
private:
    vector<pair<Product, int>> items; // Pair of product and quantity
};

void ShoppingCart::addItem(Product product, int quantity) {
    items.push_back(make_pair(product, quantity));
    cout << "Added " << quantity << " " << product.name << " to the cart." << endl;
}

void ShoppingCart::removeItem(int productId) {
    for (auto it = items.begin(); it != items.end(); ++it) {
        if (it->first.id == productId) {
            cout << "Removed " << it->second << " " << it->first.name << " from the cart." << endl;
            items.erase(it);
            return;
        }
    }
    cout << "Product with ID " << productId << " not found in the cart." << endl;
}

void ShoppingCart::checkout() {
    double total = 0.0;
    cout << "===== Checkout =====" << endl;
    cout << setw(5) << "ID" << setw(20) << "Product" << setw(10) << "Price" << setw(10) << "Quantity" << setw(15) << "Subtotal" << endl;
    cout << "====================" << endl;

    for (const auto& item : items) {
        const Product& product = item.first;
        int quantity = item.second;
        double subtotal = product.price * quantity;
        total += subtotal;

        cout << setw(5) << product.id << setw(20) << product.name << setw(10) << product.price
             << setw(10) << quantity << setw(15) << subtotal << endl;
    }

    cout << "====================" << endl;
    cout << "Total: $" << total << endl;
    cout << "Thank you for shopping with us!" << endl;
}

void ShoppingCart::displayCart() {
    cout << "===== Shopping Cart =====" << endl;
    cout << setw(5) << "ID" << setw(20) << "Product" << setw(10) << "Price" << setw(10) << "Quantity" << endl;
    cout << "=========================" << endl;

    for (const auto& item : items) {
        const Product& product = item.first;
        int quantity = item.second;

        cout << setw(5) << product.id << setw(20) << product.name << setw(10) << product.price << setw(10) << quantity << endl;
    }

    cout << "=========================" << endl;
}

int main() {
    vector<Product> products = {
        {1, "Product A", 10.99},
        {2, "Product B", 7.99},
        {3, "Product C", 5.49}
    };

    ShoppingCart cart;
    
    while (true) {
        cout << "===== Shopping Mall Billing System =====" << endl;
        cout << "1. Add Item to Cart" << endl;
        cout << "2. Remove Item from Cart" << endl;
        cout << "3. View Cart" << endl;
        cout << "4. Checkout" << endl;
        cout << "5. Exit" << endl;
        cout << "Enter your choice: ";

        int choice;
        cin >> choice;

        switch (choice) {
            case 1: {
                cout << "Enter Product ID: ";
                int productId;
                cin >> productId;
                
                cout << "Enter Quantity: ";
                int quantity;
                cin >> quantity;
                
                if (productId >= 1 && productId <= products.size()) {
                    cart.addItem(products[productId - 1], quantity);
                } else {
                    cout << "Invalid Product ID." << endl;
                }
                break;
            }
            case 2: {
                cout << "Enter Product ID to remove: ";
                int productId;
                cin >> productId;
                cart.removeItem(productId);
                break;
            }
            case 3: {
                cart.displayCart();
                break;
            }
            case 4: {
                cart.checkout();
                return 0;
            }
            case 5: {
                return 0;
            }
            default: {
                cout << "Invalid choice. Please try again." << endl;
                break;
            }
        }
    }

    return 0;
}